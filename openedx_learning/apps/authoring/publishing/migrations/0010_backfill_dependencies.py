"""
Backfill PublishableEntityVersionDependency entries based on ContainerVersions.

We're introducing a lower-level publishing concept of a dependency that will be
used by Containers, but this means we have to backfill that dependency info for
existing Containers in the system.
"""
# Generated by Django 4.2.23 on 2025-09-01 19:16

from django.db import migrations
from django.db.models import Prefetch


def create_backfill(apps, schema_editor):
    """
    Create dependency entries and update dep hashes for Draft and Published.
    """
    _create_dependencies(apps)
    _update_draft_dependencies_hash(apps)
    _update_published_dependencies_hash(apps)


def _create_dependencies(apps):
    """
    Populate the PublishableEntityVersion.dependencies relation.

    The only ones we should have in the system at this point are the ones from
    containers, so we query ContainerVersion for that.
    """
    PublishableEntityVersionDependency = apps.get_model(
        "oel_publishing", "PublishableEntityVersionDependency"
    )
    ContainerVersion = apps.get_model("oel_publishing", "ContainerVersion")

    for container_version in ContainerVersion.objects.all():
        # using a set to de-dupe
        child_entity_ids = set(
            container_version
            .entity_list
            .entitylistrow_set
            .all()
            .values_list("entity_id", flat=True)
        )
        PublishableEntityVersionDependency.objects.bulk_create(
            [
                PublishableEntityVersionDependency(
                    version_id=container_version.pk,
                    entity_id=entity_id
                )
                for entity_id in child_entity_ids
            ],
            ignore_conflicts=True,
        )

def _update_draft_dependencies_hash(apps):
    """
    Update all container Draft.dependencies_hash_digest

    Backfill dependency state hashes. The important thing here is that things
    without dependencies will have the default (blank) state hash, so we only
    need to query for Draft entries for Containers.
    """
    from ..api import hash_for_branch_item

    Draft = apps.get_model("oel_publishing", "Draft")
    drafts_that_can_have_deps = (
        Draft
        .objects
        .filter(version__isnull=False, entity__container__isnull=False)
        .prefetch_related("version__dependencies")
    )
    already_computed_hashes = {}
    drafts_to_deps = {
        draft: [
            entity.draft
            for entity in draft.version.dependencies.all()
            if hasattr(entity, "draft") and entity.draft.version
        ]
        for draft in drafts_that_can_have_deps
    }
    for draft in drafts_to_deps:
        draft.dependencies_hash_digest = hash_for_branch_item(
            draft, drafts_to_deps, already_computed_hashes
        )
    Draft.objects.bulk_update(drafts_to_deps.keys(), ["dependencies_hash_digest"])


def _update_published_dependencies_hash(apps):
    """
    Update all container Published.dependencies_hash_digest

    Backfill dependency state hashes. The important thing here is that things
    without dependencies will have the default (blank) state hash, so we only
    need to query for Published entries for Containers.
    """
    from ..api import hash_for_branch_item

    Published = apps.get_model("oel_publishing", "Published")
    published_that_can_have_deps = (
        Published
        .objects
        .filter(version__isnull=False, entity__container__isnull=False)
        .prefetch_related("version__dependencies")
    )

    already_computed_hashes = {}
    published_to_deps = {
        published: [
            entity.published
            for entity in published.version.dependencies.all()
            if hasattr(entity, "published") and entity.published.version
        ]
        for published in published_that_can_have_deps
    }
    for published in published_to_deps:
        published.dependencies_hash_digest = hash_for_branch_item(
            published, published_to_deps, already_computed_hashes
        )
    Published.objects.bulk_update(published_to_deps.keys(), ["dependencies_hash_digest"])


def remove_backfill(apps, schema_editor):
    """
    Reset all dep hash values to default ('') and remove dependencies.
    """
    Draft = apps.get_model("oel_publishing", "Draft")
    Published = apps.get_model("oel_publishing", "Published")
    PublishableEntityVersionDependency = apps.get_model(
        "oel_publishing", "PublishableEntityVersionDependency"
    )

    Draft.objects.all().update(dependencies_hash_digest='')
    Published.objects.all().update(dependencies_hash_digest='')
    PublishableEntityVersionDependency.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('oel_publishing', '0009_draft_dependencies_hash_digest_and_more'),
    ]

    operations = [
        migrations.RunPython(create_backfill, reverse_code=remove_backfill)
    ]
