# Generated by Django 4.2.15 on 2025-01-17 14:23

import uuid

import django.db.models.deletion
from django.db import migrations, models

import openedx_learning.lib.fields
import openedx_learning.lib.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('oel_publishing', '0002_alter_learningpackage_key_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='LearningContextLinksStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'context_key',
                    openedx_learning.lib.fields.MultiCollationCharField(
                        db_collations={'mysql': 'utf8mb4_bin', 'sqlite': 'BINARY'},
                        help_text='Linking status for downstream/course context key',
                        max_length=500,
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('pending', 'Pending'),
                            ('processing', 'Processing'),
                            ('failed', 'Failed'),
                            ('completed', 'Completed'),
                        ],
                        help_text='Status of links in given learning context/course.',
                        max_length=20,
                    ),
                ),
                ('created', models.DateTimeField(validators=[openedx_learning.lib.validators.validate_utc_datetime])),
                ('updated', models.DateTimeField(validators=[openedx_learning.lib.validators.validate_utc_datetime])),
            ],
            options={
                'verbose_name': 'Learning Context Links status',
                'verbose_name_plural': 'Learning Context Links status',
            },
        ),
        migrations.CreateModel(
            name='PublishableEntityLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                (
                    'upstream_usage_key',
                    openedx_learning.lib.fields.MultiCollationCharField(
                        db_collations={'mysql': 'utf8mb4_bin', 'sqlite': 'BINARY'},
                        help_text=(
                            'Upstream block usage key, this value cannot be null and useful to track upstream'
                            ' library blocks that do not exist yet'
                        ),
                        max_length=500,
                    ),
                ),
                (
                    'upstream_context_key',
                    openedx_learning.lib.fields.MultiCollationCharField(
                        db_collations={'mysql': 'utf8mb4_bin', 'sqlite': 'BINARY'},
                        help_text='Upstream context key i.e., learning_package/library key',
                        max_length=500,
                    ),
                ),
                (
                    'downstream_usage_key',
                    openedx_learning.lib.fields.MultiCollationCharField(
                        db_collations={'mysql': 'utf8mb4_bin', 'sqlite': 'BINARY'}, max_length=500
                    ),
                ),
                (
                    'downstream_context_key',
                    openedx_learning.lib.fields.MultiCollationCharField(
                        db_collations={'mysql': 'utf8mb4_bin', 'sqlite': 'BINARY'}, max_length=500
                    ),
                ),
                (
                    'downstream_context_title',
                    openedx_learning.lib.fields.MultiCollationCharField(
                        db_collations={'mysql': 'utf8mb4_unicode_ci', 'sqlite': 'NOCASE'},
                        help_text='The title of downstream context, for example, course display name.',
                        max_length=1000,
                    ),
                ),
                ('version_synced', models.IntegerField()),
                ('version_declined', models.IntegerField(blank=True, null=True)),
                ('created', models.DateTimeField(validators=[openedx_learning.lib.validators.validate_utc_datetime])),
                ('updated', models.DateTimeField(validators=[openedx_learning.lib.validators.validate_utc_datetime])),
                (
                    'upstream_block',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='links',
                        to='oel_publishing.publishableentity',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Publishable Entity Link',
                'verbose_name_plural': 'Publishable Entity Links',
            },
        ),
        migrations.AddConstraint(
            model_name='learningcontextlinksstatus',
            constraint=models.UniqueConstraint(fields=('context_key',), name='oel_link_ent_status_ctx_key'),
        ),
        migrations.AddIndex(
            model_name='publishableentitylink',
            index=models.Index(fields=['downstream_context_key'], name='oel_link_ent_idx_down_ctx_key'),
        ),
        migrations.AddIndex(
            model_name='publishableentitylink',
            index=models.Index(fields=['upstream_context_key'], name='oel_link_ent_idx_up_ctx_key'),
        ),
        migrations.AddConstraint(
            model_name='publishableentitylink',
            constraint=models.UniqueConstraint(fields=('downstream_usage_key',), name='oel_link_ent_downstream_key'),
        ),
    ]
