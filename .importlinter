# openedx_learning is intended to be a library of apps used across multiple
# projects, and we want to ensure certain dependency relationships. Please
# think through any changes you make to this file carefully, and don't just
# casually modify these linting rules to "fix the build".
[importlinter]
root_package = openedx_learning

# This is the most basic layering for openedx_learning.
#
# The "lib" package is meant for low level utilities, field definitions, and the
# like, so it's at the bottom layer.
#
# The "core" apps are meant to be the heart of our system, with foundational
# data models and plugin interfaces. It can rely on "lib" utilities.
#
# The "contrib" apps are meant to be apps that could easily be created outside
# of openedx_learning in a separate repository, but are bundled here because
# we think they'll be generally useful. These apps may call into "core" or "lib"
# apps, but not the other way around. The "core" apps should *never* import from
# "contrib".
[importlinter:contract:openedx_learning_layering]
name = Lib / Core / Contrib Layering
type = layers
layers=
    openedx_learning.contrib
    openedx_learning.core
    openedx_learning.lib

# This is layering within our Core apps. Every new Core app should be added to
# this list when it it created.
[importlinter:contract:core_apps_layering]
name = Core App Dependency Layering
type = layers
layers=
    # The "components" app is responsible for storing versioned Components,
    # which is Open edX Studio terminology maps to things like individual
    # Problems, Videos, and blocks of HTML text. This is also the type we would
    # associate with a single "leaf" XBlockâ€“one that is not a container type and
    # has no child elements.
    openedx_learning.core.components
    # The "contents" app stores the simplest pieces of binary and text data,
    # without versioning information. These belong to a single Learning Package.
    openedx_learning.core.contents
    # The lowest layer is "publishing", which holds the basic primitives needed
    # to create Learning Packages and manage the draft and publish states for
    # various types of content.
    openedx_learning.core.publishing
